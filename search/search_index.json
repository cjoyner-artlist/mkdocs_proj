{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Installation/","title":"Installation","text":""},{"location":"Installation/#installation-guide","title":"Installation guide","text":"<p>To install <code>TreePy</code> use </p> <pre><code>pip install treepy\n</code></pre>"},{"location":"Installation/#quickstart","title":"Quickstart","text":"<p>Then to use we can write</p> <pre><code>from treepy.abilities import BaseTree\n\nt = BaseTree('Oak')\n\ndef my_function(t: BaseTree):\n\n    t.print_name()\n</code></pre>"},{"location":"API_Reference/readme/","title":"API Reference","text":"<p>Here is the API reference</p>"},{"location":"API_Reference/apis/readme/","title":"APIs","text":""},{"location":"API_Reference/apis/readme/#overview","title":"Overview","text":"<p>These are APIs that we use to interact with LLMs</p>"},{"location":"API_Reference/apis/readme/#gemini","title":"Gemini","text":""},{"location":"API_Reference/apis/readme/#chat_api.apis.gemini.GeminiAPI","title":"<code>GeminiAPI</code>","text":"<p>             Bases: <code>GenerativeModel</code></p> Source code in <code>chat_api/apis/gemini.py</code> <pre><code>class GeminiAPI(GenerativeModel):\n\n  @classmethod\n  def from_env(cls):\n    \"\"\"\n    Instantiates a `GeminiAPI` object using the `GEMINI_API_KEY` environment variable.\n\n    This method retrieves the API key from the `GEMINI_API_KEY` environment variable \n    and uses it to create a new `GeminiAPI` instance. It's a convenient way to manage \n    your API key without including it directly in your code.\n\n    **Raises:**\n\n    ValueError: If the `GEMINI_API_KEY` environment variable is not set.\n\n    **Example Usage:**\n\n    ```python\n    # Assuming GEMINI_API_KEY is set in the environment\n    api = GeminiAPI.from_env()\n    ```\n    \"\"\"\n    api_key = os.getenv(\"GEMINI_API_KEY\")\n    if not api_key:\n      raise ValueError(\"GEMINI_API_KEY environment variable not set\")\n    return cls(api_key)\n\n  def generate_from_file(self, prompt_file):\n    \"\"\"\n    Reads prompts from a text file line by line and generates responses for each.\n\n    This method iterates over each line in the provided text file, treating each line \n    as a separate prompt. It then uses the `generate_text` method inherited from the \n    parent class to generate a response for each prompt. Finally, it prints both the \n    original prompt and the generated response.\n\n    **Args:**\n\n    prompt_file (str): The path to a text file containing prompts, one per line.\n\n    **Example Usage:**\n\n    ```python\n    # Assuming you have a file named \"prompts.txt\" with prompts like:\n    # Write a poem about a cat\n    # Describe a futuristic city\n\n    api = GeminiAPI.from_env()  # Assuming GEMINI_API_KEY is set\n    api.generate_from_file(\"prompts.txt\")\n\n    def my_func(param: int):\n        param + 3\n        return param\n    ```\n\n    This will print the prompts and corresponding generated responses from Gemini.\n    \"\"\"\n    with open(prompt_file, 'r') as f:\n      for line in f:\n        prompt = line.strip()\n        response = self.generate_text(prompt)\n        print(f\"Prompt: {prompt}\\nResponse: {response.text}\\n\")\n</code></pre>"},{"location":"API_Reference/apis/readme/#chat_api.apis.gemini.GeminiAPI.from_env","title":"<code>from_env()</code>  <code>classmethod</code>","text":"<p>Instantiates a <code>GeminiAPI</code> object using the <code>GEMINI_API_KEY</code> environment variable.</p> <p>This method retrieves the API key from the <code>GEMINI_API_KEY</code> environment variable  and uses it to create a new <code>GeminiAPI</code> instance. It's a convenient way to manage  your API key without including it directly in your code.</p> <p>Raises:</p> <p>ValueError: If the <code>GEMINI_API_KEY</code> environment variable is not set.</p> <p>Example Usage:</p> <pre><code># Assuming GEMINI_API_KEY is set in the environment\napi = GeminiAPI.from_env()\n</code></pre> Source code in <code>chat_api/apis/gemini.py</code> <pre><code>@classmethod\ndef from_env(cls):\n  \"\"\"\n  Instantiates a `GeminiAPI` object using the `GEMINI_API_KEY` environment variable.\n\n  This method retrieves the API key from the `GEMINI_API_KEY` environment variable \n  and uses it to create a new `GeminiAPI` instance. It's a convenient way to manage \n  your API key without including it directly in your code.\n\n  **Raises:**\n\n  ValueError: If the `GEMINI_API_KEY` environment variable is not set.\n\n  **Example Usage:**\n\n  ```python\n  # Assuming GEMINI_API_KEY is set in the environment\n  api = GeminiAPI.from_env()\n  ```\n  \"\"\"\n  api_key = os.getenv(\"GEMINI_API_KEY\")\n  if not api_key:\n    raise ValueError(\"GEMINI_API_KEY environment variable not set\")\n  return cls(api_key)\n</code></pre>"},{"location":"API_Reference/apis/readme/#chat_api.apis.gemini.GeminiAPI.generate_from_file","title":"<code>generate_from_file(prompt_file)</code>","text":"<p>Reads prompts from a text file line by line and generates responses for each.</p> <p>This method iterates over each line in the provided text file, treating each line  as a separate prompt. It then uses the <code>generate_text</code> method inherited from the  parent class to generate a response for each prompt. Finally, it prints both the  original prompt and the generated response.</p> <p>Args:</p> <p>prompt_file (str): The path to a text file containing prompts, one per line.</p> <p>Example Usage:</p> <pre><code># Assuming you have a file named \"prompts.txt\" with prompts like:\n# Write a poem about a cat\n# Describe a futuristic city\n\napi = GeminiAPI.from_env()  # Assuming GEMINI_API_KEY is set\napi.generate_from_file(\"prompts.txt\")\n\ndef my_func(param: int):\n    param + 3\n    return param\n</code></pre> <p>This will print the prompts and corresponding generated responses from Gemini.</p> Source code in <code>chat_api/apis/gemini.py</code> <pre><code>def generate_from_file(self, prompt_file):\n  \"\"\"\n  Reads prompts from a text file line by line and generates responses for each.\n\n  This method iterates over each line in the provided text file, treating each line \n  as a separate prompt. It then uses the `generate_text` method inherited from the \n  parent class to generate a response for each prompt. Finally, it prints both the \n  original prompt and the generated response.\n\n  **Args:**\n\n  prompt_file (str): The path to a text file containing prompts, one per line.\n\n  **Example Usage:**\n\n  ```python\n  # Assuming you have a file named \"prompts.txt\" with prompts like:\n  # Write a poem about a cat\n  # Describe a futuristic city\n\n  api = GeminiAPI.from_env()  # Assuming GEMINI_API_KEY is set\n  api.generate_from_file(\"prompts.txt\")\n\n  def my_func(param: int):\n      param + 3\n      return param\n  ```\n\n  This will print the prompts and corresponding generated responses from Gemini.\n  \"\"\"\n  with open(prompt_file, 'r') as f:\n    for line in f:\n      prompt = line.strip()\n      response = self.generate_text(prompt)\n      print(f\"Prompt: {prompt}\\nResponse: {response.text}\\n\")\n</code></pre>"},{"location":"API_Reference/apis/readme/#zeus","title":"Zeus","text":""},{"location":"API_Reference/apis/readme/#chat_api.apis.zeus.ZeusAPI","title":"<code>ZeusAPI</code>","text":"<p>             Bases: <code>GenerativeModel</code></p> Source code in <code>chat_api/apis/zeus.py</code> <pre><code>class ZeusAPI(GenerativeModel):\n\n  @classmethod\n  def from_env(cls):\n    \"\"\"\n    Instantiates a `GeminiAPI` object using the `GEMINI_API_KEY` environment variable.\n\n    This method retrieves the API key from the `GEMINI_API_KEY` environment variable \n    and uses it to create a new `GeminiAPI` instance. It's a convenient way to manage \n    your API key without including it directly in your code.\n\n    **Raises:**\n\n    ValueError: If the `GEMINI_API_KEY` environment variable is not set.\n\n    **Example Usage:**\n\n    ```python\n    # Assuming GEMINI_API_KEY is set in the environment\n    api = GeminiAPI.from_env()\n    ```\n    \"\"\"\n    api_key = os.getenv(\"GEMINI_API_KEY\")\n    if not api_key:\n      raise ValueError(\"GEMINI_API_KEY environment variable not set\")\n    return cls(api_key)\n\n  def generate_from_file(self, prompt_file):\n    \"\"\"\n    Reads prompts from a text file line by line and generates responses for each.\n\n    This method iterates over each line in the provided text file, treating each line \n    as a separate prompt. It then uses the `generate_text` method inherited from the \n    parent class to generate a response for each prompt. Finally, it prints both the \n    original prompt and the generated response.\n\n    **Args:**\n\n    prompt_file (str): The path to a text file containing prompts, one per line.\n\n    **Example Usage:**\n\n    ```python\n    # Assuming you have a file named \"prompts.txt\" with prompts like:\n    # Write a poem about a cat\n    # Describe a futuristic city\n\n    api = GeminiAPI.from_env()  # Assuming GEMINI_API_KEY is set\n    api.generate_from_file(\"prompts.txt\")\n\n    def my_func(param: int):\n        param + 3\n        return param\n    ```\n\n    This will print the prompts and corresponding generated responses from Gemini.\n    \"\"\"\n    with open(prompt_file, 'r') as f:\n      for line in f:\n        prompt = line.strip()\n        response = self.generate_text(prompt)\n        print(f\"Prompt: {prompt}\\nResponse: {response.text}\\n\")\n</code></pre>"},{"location":"API_Reference/apis/readme/#chat_api.apis.zeus.ZeusAPI.from_env","title":"<code>from_env()</code>  <code>classmethod</code>","text":"<p>Instantiates a <code>GeminiAPI</code> object using the <code>GEMINI_API_KEY</code> environment variable.</p> <p>This method retrieves the API key from the <code>GEMINI_API_KEY</code> environment variable  and uses it to create a new <code>GeminiAPI</code> instance. It's a convenient way to manage  your API key without including it directly in your code.</p> <p>Raises:</p> <p>ValueError: If the <code>GEMINI_API_KEY</code> environment variable is not set.</p> <p>Example Usage:</p> <pre><code># Assuming GEMINI_API_KEY is set in the environment\napi = GeminiAPI.from_env()\n</code></pre> Source code in <code>chat_api/apis/zeus.py</code> <pre><code>@classmethod\ndef from_env(cls):\n  \"\"\"\n  Instantiates a `GeminiAPI` object using the `GEMINI_API_KEY` environment variable.\n\n  This method retrieves the API key from the `GEMINI_API_KEY` environment variable \n  and uses it to create a new `GeminiAPI` instance. It's a convenient way to manage \n  your API key without including it directly in your code.\n\n  **Raises:**\n\n  ValueError: If the `GEMINI_API_KEY` environment variable is not set.\n\n  **Example Usage:**\n\n  ```python\n  # Assuming GEMINI_API_KEY is set in the environment\n  api = GeminiAPI.from_env()\n  ```\n  \"\"\"\n  api_key = os.getenv(\"GEMINI_API_KEY\")\n  if not api_key:\n    raise ValueError(\"GEMINI_API_KEY environment variable not set\")\n  return cls(api_key)\n</code></pre>"},{"location":"API_Reference/apis/readme/#chat_api.apis.zeus.ZeusAPI.generate_from_file","title":"<code>generate_from_file(prompt_file)</code>","text":"<p>Reads prompts from a text file line by line and generates responses for each.</p> <p>This method iterates over each line in the provided text file, treating each line  as a separate prompt. It then uses the <code>generate_text</code> method inherited from the  parent class to generate a response for each prompt. Finally, it prints both the  original prompt and the generated response.</p> <p>Args:</p> <p>prompt_file (str): The path to a text file containing prompts, one per line.</p> <p>Example Usage:</p> <pre><code># Assuming you have a file named \"prompts.txt\" with prompts like:\n# Write a poem about a cat\n# Describe a futuristic city\n\napi = GeminiAPI.from_env()  # Assuming GEMINI_API_KEY is set\napi.generate_from_file(\"prompts.txt\")\n\ndef my_func(param: int):\n    param + 3\n    return param\n</code></pre> <p>This will print the prompts and corresponding generated responses from Gemini.</p> Source code in <code>chat_api/apis/zeus.py</code> <pre><code>def generate_from_file(self, prompt_file):\n  \"\"\"\n  Reads prompts from a text file line by line and generates responses for each.\n\n  This method iterates over each line in the provided text file, treating each line \n  as a separate prompt. It then uses the `generate_text` method inherited from the \n  parent class to generate a response for each prompt. Finally, it prints both the \n  original prompt and the generated response.\n\n  **Args:**\n\n  prompt_file (str): The path to a text file containing prompts, one per line.\n\n  **Example Usage:**\n\n  ```python\n  # Assuming you have a file named \"prompts.txt\" with prompts like:\n  # Write a poem about a cat\n  # Describe a futuristic city\n\n  api = GeminiAPI.from_env()  # Assuming GEMINI_API_KEY is set\n  api.generate_from_file(\"prompts.txt\")\n\n  def my_func(param: int):\n      param + 3\n      return param\n  ```\n\n  This will print the prompts and corresponding generated responses from Gemini.\n  \"\"\"\n  with open(prompt_file, 'r') as f:\n    for line in f:\n      prompt = line.strip()\n      response = self.generate_text(prompt)\n      print(f\"Prompt: {prompt}\\nResponse: {response.text}\\n\")\n</code></pre>"},{"location":"Guide/","title":"How to Guide","text":"<p>A how-to guide for <code>treepy</code>.</p>"},{"location":"Guide/#getting-started","title":"Getting started","text":""},{"location":"Guide/#part-1-start","title":"Part 1 - Start","text":""},{"location":"Guide/#part-2-middle","title":"Part 2 - Middle","text":""},{"location":"Guide/#part-3-end","title":"Part 3 - End","text":""},{"location":"Guide/#advanced-features","title":"Advanced features","text":""},{"location":"Guide/and_more_steps/","title":"And more steps","text":""},{"location":"Guide/01_next_steps/","title":"Next steps","text":""},{"location":"Guide/01_next_steps/#_1","title":"Next steps","text":""}]}